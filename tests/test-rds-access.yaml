apiVersion: v1
kind: ConfigMap
metadata:
  name: test-rds-access-sidecar-script
  namespace: node-example
data:
  generate-token.sh: |
    #!/bin/bash
    set -e
    
    echo "üîë AWS CLI Sidecar - Generating RDS IAM tokens"
    echo "============================================="
    
    while true; do
      echo "$(date): Generating new IAM database auth token..."
      
      TOKEN=$(aws rds generate-db-auth-token \
        --hostname $DB_HOST \
        --port $DB_PORT \
        --username $DB_USERNAME \
        --region eu-central-1 2>/dev/null) || {
        echo "‚ùå FAIL: Could not generate IAM database auth token"
        sleep 30
        continue
      }
      
      if [ -n "$TOKEN" ]; then
        echo "$TOKEN" > /shared/db-token
        echo "‚úÖ Token generated and saved (${#TOKEN} chars)"
      else
        echo "‚ùå Empty token generated"
      fi
      
      # Refresh token every 14 minutes (tokens are valid for 15 minutes)
      sleep 840
    done

  test-mysql.sh: |
    #!/bin/bash
    set -e
    
    echo "üóÑÔ∏è  MySQL Client - RDS Database Access Test"
    echo "==========================================="
    
    # Wait for initial token
    echo "‚è≥ Waiting for IAM token from sidecar..."
    while [ ! -f /shared/db-token ]; do
      sleep 2
    done
    
    # Test 1: Verify token exists
    echo "Test 1: Verifying IAM token availability..."
    if [ -f /shared/db-token ]; then
      TOKEN=$(cat /shared/db-token)
      if [ -n "$TOKEN" ]; then
        echo "‚úÖ PASS: IAM token available (${#TOKEN} chars)"
      else
        echo "‚ùå FAIL: Empty IAM token"
        exit 1
      fi
    else
      echo "‚ùå FAIL: No IAM token file found"
      exit 1
    fi
    
    # Test 2: Test database connectivity with IAM authentication  
    echo "Test 2: Testing database connectivity with IAM auth..."
    
    mysql -h $DB_HOST -P $DB_PORT -u $DB_USERNAME --password="$TOKEN" \
      --enable-cleartext-plugin --connect-timeout=10 \
      -e "SELECT 'Database connection successful!' as result;" 2>/dev/null || {
      echo "‚ùå FAIL: Could not connect to database with IAM auth"
      echo "üîç Debug: Host=$DB_HOST, Port=$DB_PORT, User=$DB_USERNAME"
      exit 1
    }
    
    echo "‚úÖ PASS: Database connection with IAM auth successful"
    
    # Test 3: Test basic database operations
    echo "Test 3: Testing basic database operations..."
    
    mysql -h $DB_HOST -P $DB_PORT -u $DB_USERNAME --password="$TOKEN" \
      --enable-cleartext-plugin --connect-timeout=10 \
      -e "CREATE TABLE IF NOT EXISTS test_table (id INT PRIMARY KEY, message VARCHAR(255)); 
          INSERT INTO test_table (id, message) VALUES (1, 'Test from EKS sidecar pod') 
          ON DUPLICATE KEY UPDATE message='Test from EKS sidecar pod';
          SELECT message FROM test_table WHERE id=1;" 2>/dev/null || {
      echo "‚ùå FAIL: Could not perform database operations"
      exit 1
    }
    
    echo "‚úÖ PASS: Basic database operations successful"
    
    # Test 4: Test database permissions
    echo "Test 4: Testing database permissions..."
    
    TABLES=$(mysql -h $DB_HOST -P $DB_PORT -u $DB_USERNAME --password="$TOKEN" \
      --enable-cleartext-plugin --connect-timeout=10 \
      -e "SHOW TABLES;" 2>/dev/null | wc -l) || {
      echo "‚ùå FAIL: Could not show tables"
      exit 1
    }
    
    if [ "$TABLES" -gt 1 ]; then
      echo "‚úÖ PASS: Database permissions verified (can show tables)"
    else
      echo "‚ùå FAIL: No tables visible or insufficient permissions"
      exit 1
    fi
    
    # Cleanup
    echo "üßπ Cleaning up test table..."
    mysql -h $DB_HOST -P $DB_PORT -u $DB_USERNAME --password="$TOKEN" \
      --enable-cleartext-plugin --connect-timeout=10 \
      -e "DROP TABLE IF EXISTS test_table;" 2>/dev/null || {
      echo "‚ö†Ô∏è  WARNING: Could not cleanup test table"
    }
    
    echo ""
    echo "üéâ All RDS database access tests completed successfully!"
    echo "‚úÖ IAM authentication working"
    echo "‚úÖ Database connectivity confirmed"  
    echo "‚úÖ Basic operations functional"
    echo "‚úÖ Permissions validated"

---
apiVersion: batch/v1
kind: Job
metadata:
  name: rds-access-sidecar-test
  namespace: node-example
spec:
  template:
    metadata:
      labels:
        app: rds-access-sidecar-test
    spec:
      serviceAccountName: node-example
      restartPolicy: Never
      containers:
      # AWS CLI sidecar for token generation
      - name: aws-token-generator
        image: amazon/aws-cli:latest
        command: ["/bin/bash"]
        args: ["/scripts/generate-token.sh"]
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: node-example-rds-credentials
              key: host
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: node-example-rds-credentials
              key: port
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: node-example-rds-credentials  
              key: username
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        volumeMounts:
        - name: shared-data
          mountPath: /shared
        - name: token-script
          mountPath: /scripts
      
      # MySQL client for database testing
      - name: mysql-client
        image: mysql:8.0
        command: ["/bin/bash"]
        args: ["/scripts/test-mysql.sh"]
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: node-example-rds-credentials
              key: host
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: node-example-rds-credentials
              key: port
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: node-example-rds-credentials  
              key: username
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: shared-data
          mountPath: /shared
        - name: mysql-script
          mountPath: /scripts
      
      volumes:
      - name: shared-data
        emptyDir: {}
      - name: token-script
        configMap:
          name: test-rds-access-sidecar-script
          items:
          - key: generate-token.sh
            path: generate-token.sh
          defaultMode: 0755
      - name: mysql-script
        configMap:
          name: test-rds-access-sidecar-script
          items:
          - key: test-mysql.sh
            path: test-mysql.sh
          defaultMode: 0755