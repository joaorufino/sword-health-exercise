apiVersion: v1
kind: ConfigMap
metadata:
  name: test-rds-access-script
  namespace: node-example
data:
  test-mysql.sh: |
    #!/bin/bash
    set -e
    
    echo "üóÑÔ∏è  MySQL Client - RDS Database Access Test"
    echo "==========================================="
    
    # Test 1: Test database connectivity with password authentication  
    echo "Test 1: Testing database connectivity..."
    
    mysql -h $DB_HOST -P $DB_PORT -u $DB_USER --password="$DB_PASSWORD" \
      --connect-timeout=10 \
      -e "SELECT 'Database connection successful!' as result;" 2>/dev/null || {
      echo "‚ùå FAIL: Could not connect to database"
      echo "üîç Debug: Host=$DB_HOST, Port=$DB_PORT, User=$DB_USER"
      exit 1
    }
    
    echo "‚úÖ PASS: Database connection successful"
    
    # Test 2: Test basic database operations
    echo "Test 2: Testing basic database operations..."
    
    mysql -h $DB_HOST -P $DB_PORT -u $DB_USER --password="$DB_PASSWORD" \
      --connect-timeout=10 \
      -e "CREATE TABLE IF NOT EXISTS test_table (id INT PRIMARY KEY, message VARCHAR(255)); 
          INSERT INTO test_table (id, message) VALUES (1, 'Test from EKS pod') 
          ON DUPLICATE KEY UPDATE message='Test from EKS pod';
          SELECT message FROM test_table WHERE id=1;" 2>/dev/null || {
      echo "‚ùå FAIL: Could not perform database operations"
      exit 1
    }
    
    echo "‚úÖ PASS: Basic database operations successful"
    
    # Test 3: Test database permissions
    echo "Test 3: Testing database permissions..."
    
    TABLES=$(mysql -h $DB_HOST -P $DB_PORT -u $DB_USER --password="$DB_PASSWORD" \
      --connect-timeout=10 \
      -e "SHOW TABLES;" 2>/dev/null | wc -l) || {
      echo "‚ùå FAIL: Could not show tables"
      exit 1
    }
    
    if [ "$TABLES" -gt 1 ]; then
      echo "‚úÖ PASS: Database permissions verified (can show tables)"
    else
      echo "‚ùå FAIL: No tables visible or insufficient permissions"
      exit 1
    fi
    
    # Test 4: Verify database name
    echo "Test 4: Verifying database name..."
    
    CURRENT_DB=$(mysql -h $DB_HOST -P $DB_PORT -u $DB_USER --password="$DB_PASSWORD" \
      --connect-timeout=10 \
      -e "SELECT DATABASE();" 2>/dev/null | tail -n1) || {
      echo "‚ùå FAIL: Could not query current database"
      exit 1
    }
    
    if [ "$CURRENT_DB" = "$DB_NAME" ]; then
      echo "‚úÖ PASS: Connected to correct database: $DB_NAME"
    else
      echo "‚ùå FAIL: Wrong database - expected: $DB_NAME, got: $CURRENT_DB"
      exit 1
    fi
    
    # Cleanup
    echo "üßπ Cleaning up test table..."
    mysql -h $DB_HOST -P $DB_PORT -u $DB_USER --password="$DB_PASSWORD" \
      --connect-timeout=10 \
      -e "DROP TABLE IF EXISTS test_table;" 2>/dev/null || {
      echo "‚ö†Ô∏è  WARNING: Could not cleanup test table"
    }
    
    echo ""
    echo "üéâ All RDS database access tests completed successfully!"
    echo "‚úÖ Password authentication working"
    echo "‚úÖ Database connectivity confirmed"  
    echo "‚úÖ Basic operations functional"
    echo "‚úÖ Permissions validated"
    echo "‚úÖ Connected to correct database"

---
apiVersion: batch/v1
kind: Job
metadata:
  name: rds-access-test
  namespace: node-example
spec:
  template:
    metadata:
      labels:
        app: rds-access-test
    spec:
      serviceAccountName: node-example
      restartPolicy: Never
      containers:
      - name: mysql-client
        image: mysql:8.0
        command: ["/bin/bash"]
        args: ["/scripts/test-mysql.sh"]
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: node-example-rds-credentials
              key: host
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: node-example-rds-credentials
              key: port
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: node-example-rds-credentials
              key: database
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: node-example-rds-credentials  
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: node-example-rds-credentials
              key: password
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: mysql-script
          mountPath: /scripts
      volumes:
      - name: mysql-script
        configMap:
          name: test-rds-access-script
          items:
          - key: test-mysql.sh
            path: test-mysql.sh
          defaultMode: 0755